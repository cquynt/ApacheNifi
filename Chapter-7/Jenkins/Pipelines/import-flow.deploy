pipeline {
  agent any
  parameters {
      choice(name: 'NIFI_TARGET_ENV', description: 'NiFi Target Enviroment', choices: 'TEST-ENV\nQA-ENV')
      choice(name: 'FLOW_ENABLE', description: 'Enable Flow ?', choices: 'NO\nYES')
      choice(name: 'FLOW_START', description: 'Start Flow ?', choices: 'NO\nYES')
  }
  stages {
        stage('Run Registry'){
            steps('Step 1'){
                script {
                    sh("""
                    /opt/nifi-toolkit/bin/cli.sh session set nifi.reg.props /opt/nifi-toolkit/nifi-envs/registry18080 && 
                    export BUCKET_IDENTIFIER=`/opt/nifi-toolkit/bin/cli.sh registry list-buckets | grep -w conuti | awk '{print \$3}'` &&
                    echo \${BUCKET_IDENTIFIER} && 
                    export FLOW_IDENTIFIER=`/opt/nifi-toolkit/bin/cli.sh registry list-flows --bucketIdentifier \${BUCKET_IDENTIFIER} -u http://172.17.0.4:18080 | grep -w ConutiFlowName | awk '{print \$3}'` &&
                    echo \${FLOW_IDENTIFIER} &&
                    /opt/nifi-toolkit/bin/cli.sh session set nifi.props /opt/nifi-toolkit/nifi-envs/nifi-\${NIFI_TARGET_ENV} &&
                    
                    export PG_IMPORTED_ID=`/opt/nifi-toolkit/bin/cli.sh nifi pg-list | grep -w conuti | awk '{print \$3}'`
                    
                    export PG_IMPORTED_ID_2=`/opt/nifi-toolkit/bin/cli.sh nifi pg-change-version --processGroupId \${PG_IMPORTED_ID}`
                    
                    echo '####### PG was imported with Success\n'
                    
                    if [ \${FLOW_ENABLE} == "YES" ]
                    then
                        echo "Running Enable Services"
                        /opt/nifi-toolkit/bin/cli.sh nifi pg-enable-services pg-enable-services --processGroupId \${PG_IMPORTED_ID}
                    else
                        echo ""
                    fi 
                    echo 'Running status checks'
                    echo '/opt/nifi-toolkit/bin/cli.sh nifi pg-status --processGroupId \$PG_IMPORTED_ID'
                    export PG_STATUS_INVALID=`/opt/nifi-toolkit/bin/cli.sh nifi pg-status --processGroupId \$PG_IMPORTED_ID | tail -n +4 | awk '{print \$7}' | sed '\$ d' | sort -nr | head -n 1` &&
                    if [ \${PG_STATUS_INVALID} == 0 ]
                    then
                        echo "All components are in valid state"
                    else
                        echo "Invalid componenets found - Please Review"
                    fi 
                    if [ \${FLOW_START} == "YES" ]
                    then
                        echo "Starting PG"
                        /opt/nifi-toolkit/bin/cli.sh nifi pg-start --processGroupId \${PG_IMPORTED_ID}
                    else
                        echo ""
                    fi 
                    """)
                }

            }
        }
    }
}
